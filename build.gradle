/*
 * Copyright 2020 Aiven Oy
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {

    // https://docs.gradle.org/current/userguide/java_library_plugin.html
    id "java-library"

    // https://docs.gradle.org/current/userguide/checkstyle_plugin.html
    id "checkstyle"

    // https://docs.gradle.org/current/userguide/jacoco_plugin.html
    id "jacoco"

    // https://docs.gradle.org/current/userguide/distribution_plugin.html
    id "distribution"

    // https://docs.gradle.org/current/userguide/publishing_maven.html
    id "maven-publish"

    // https://docs.gradle.org/current/userguide/signing_plugin.html
    id "signing"
}

group = "io.aiven"

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    withJavadocJar()
    withSourcesJar()
}

compileJava {
    options.compilerArgs = ["-Xlint:all", "-Werror"]
}

javadoc {
    options.addBooleanOption('html5', true)
}

checkstyle {
    toolVersion "8.29"
    getConfigDirectory().set(rootProject.file("checkstyle/"))
}

jacoco {
    toolVersion = "0.8.5"
}

repositories {
    mavenLocal()
    mavenCentral()
}

ext {
    kafkaVersion = "1.1.0"
    parquetVersion = "1.11.1"
    junitVersion = "5.6.2"
}

distributions {
    main {
        contents {
            from jar
            from configurations.runtimeClasspath

            into("/") {
                from projectDir
                include "version.txt", "README*", "LICENSE*", "NOTICE*", "licenses/"
                include "config/"
            }
        }
    }
}

dependencies {
    compileOnly "org.apache.kafka:connect-api:$kafkaVersion"
    compileOnly "org.apache.kafka:connect-runtime:$kafkaVersion"
    compileOnly "org.apache.kafka:connect-json:$kafkaVersion"
    implementation "org.apache.parquet:parquet-avro:$parquetVersion"

    implementation "org.xerial.snappy:snappy-java:1.1.8.4"
    implementation "com.github.luben:zstd-jni:1.4.5-12"

    implementation "org.slf4j:slf4j-api:1.7.30"
    implementation "com.google.guava:guava:30.1-jre"

    implementation "org.apache.commons:commons-text:1.9"

    testImplementation "org.apache.kafka:connect-api:$kafkaVersion"
    testImplementation "org.apache.kafka:connect-json:$kafkaVersion"
    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
    testImplementation "org.apache.parquet:parquet-tools:$parquetVersion"
    testImplementation "org.hamcrest:hamcrest:2.1"
    testImplementation "org.mockito:mockito-core:3.6.0"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}

test {
    useJUnitPlatform()
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = getGroup()
            artifactId = "aiven-kafka-connect-commons"
            version = getVersion()

            from components.java

            pom {
                name = "Aiven Kafka Connect commons"
                description = "A Kafka Connect commons"
                url = "https://github.com/aiven/aiven-kafka-connect-commons"
                organization {
                    name = "Aiven Oy"
                    url = "https://aiven.io"
                }

                licenses {
                    license {
                        name = "Apache 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0"
                        distribution = "repo"
                    }
                }

                developers {
                    developer {
                        id = 'aiven'
                        name = 'Aiven Opensource'
                        email = 'opensource@aiven.io'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com:aiven/aiven-kafka-connect-commons.git'
                    developerConnection = 'scm:git:ssh://github.com:aiven/aiven-kafka-connect-commons.git'
                    url = 'https://github.com/aiven/aiven-kafka-connect-commons'
                }
            }
        }
    }

    repositories {
        maven {
            name="sonatype"

            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials(PasswordCredentials)
        }
    }
}

signing {
    sign publishing.publications.maven
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
}
