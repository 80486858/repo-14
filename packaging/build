#!/usr/bin/env python
#
# Copyright 2018-2020 wkhtmltopdf authors
#
# This file is part of wkhtmltopdf.
#
# wkhtmltopdf is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# wkhtmltopdf is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with wkhtmltopdf. If not, see <http://www.gnu.org/licenses/#LGPL>.

import argparse, copy, datetime, importlib, json, multiprocessing, os, subprocess, sys, yaml


def message(msg):
    sys.stdout.write(msg + "\n")
    sys.stdout.flush()


def shell(cmd, cwd=None):
    ret = subprocess.call(cmd, shell=True, cwd=cwd)
    if ret:
        message("%s\ncommand failed: exit code %d" % (cmd, ret))
        sys.exit(1)


def output(cmd, **args):
    try:
        text = subprocess.check_output(
            cmd, shell=True, stderr=subprocess.STDOUT, **args
        ).strip()
        return text if isinstance(text, str) else text.decode("utf-8")
    except:
        return None


def docker_images(config, targets, force):
    prefix = config["docker-prefix"]
    images = []

    def pull(image, platform):
        if image in images:
            shell("docker rmi -f %s" % image)
        if platform != "linux/amd64":
            if output('docker version --format "{{.Server.Experimental}}"') != "true":
                message(
                    "Could not detect experimental: true in docker daemon, aborting."
                )
                sys.exit(1)
        shell("docker pull --platform %s %s" % (platform or "linux/amd64", image))

    started_qemu = None
    for name in targets:
        if name not in config["docker-targets"]:
            message("Unknown target specified: %s" % name)
            sys.exit(1)

        images = (
            (output('docker images --format "{{.Repository}}:{{.Tag}}"') or "")
            .strip()
            .split("\n")
        )
        params = config["docker-targets"][name]
        needed_qemu = params.get("qemu")
        if needed_qemu and started_qemu != needed_qemu:
            qemu_config = config["qemu-user-static"][
                name in config["qemu-user-static"] and name or "default"
            ]
            pull(qemu_config["image"], needed_qemu)
            for cmd in qemu_config["setup"]:
                shell(
                    "docker run --rm --privileged %s %s" % (qemu_config["image"], cmd)
                )
            started_qemu = needed_qemu

        image = prefix + name
        args = " ".join("--build-arg %s=%s" % a for a in params["args"].items())
        if force or image not in images:
            if "from" in params.get("args", {}):
                pull(params["args"]["from"], params.get("platform") or "linux/amd64")
            shell(
                "docker build -f %s %s -t %s docker/" % (params["source"], args, image)
            )


def get_version(src_dir, iteration):
    rel_ver = open(os.path.join(src_dir, "VERSION"), "r").read().strip()
    if "-" not in rel_ver:
        return (rel_ver, iteration)

    rel_ver, rel_tag = rel_ver.split("-", 1)
    describe = output("git describe --tags --long", cwd=src_dir)
    if not describe:
        today = datetime.datetime.now().strftime("%Y%m%d")
        return (rel_ver, "0.%s.%s" % (today, rel_tag))

    commit_on = output("git log -1 --format=%cd --date=format:%Y%m%d")
    prev_tag, offset, commit = describe.split("-")

    return (rel_ver, "0.%s.%s.%s.%s" % (commit_on, offset, rel_tag, commit[1:]))


def compile_docker(config, target, src_dir, tgt_dir, debug=False):
    if target not in config["docker-targets"]:
        message("Unknown target: %s" % target)
        sys.exit(1)

    if not os.path.exists(os.path.join(src_dir, "wkhtmltopdf.pro")):
        message("Not wkhtmltopdf source directory: %s" % src_dir)
        sys.exit(1)

    if not os.path.exists(os.path.join(src_dir, "qt", "configure")):
        message("Qt not present in wkhtmltopdf source: %s" % src_dir)
        sys.exit(1)

    docker_images(config, [target], False)
    shell("mkdir -p %(tgt)s/app %(tgt)s/qt" % dict(tgt=tgt_dir))

    cross = config["docker-targets"][target].get("cross_compile")
    dimage = "--user %d:%d %s%s" % (
        os.getuid(),
        os.getgid(),
        config["docker-prefix"],
        target,
    )

    def dshell(wd, cmd):
        shell(
            "docker run --rm -v%s:%s -v%s:/%s -v%s:/pkg -w%s %s %s"
            % (
                os.path.abspath(src_dir),
                os.path.abspath(src_dir),
                os.path.abspath(tgt_dir),
                os.path.abspath(tgt_dir),
                os.getcwd(),
                wd,
                dimage,
                cmd,
            )
        )

    qtprefix = os.path.abspath(os.path.join(tgt_dir, "qt"))
    srcDir = os.path.abspath(src_dir)
    appprefix = os.path.abspath(os.path.join(tgt_dir, "app"))

    if not os.path.exists(os.path.join(tgt_dir, "qt_configured")):
        qtconfspec = config["docker-targets"][target].get("qt_config", "docker")

        qtconfig = ""
        qtconfig += " " + (config["qt-config"]["common"].strip())
        qtconfig += " " + (config["qt-config"][qtconfspec].strip())
        qtconfig += " " + (config["qt-config"]["debug"].strip() if debug else "")
        qtconfig += " " + (f"--prefix={qtprefix}")
        qtconfig += " " + ("-device-option CROSS_COMPILE=%s" % cross if cross else "")

        dshell(qtprefix, f"{os.path.join(srcDir, 'qt/configure')} {qtconfig}")
        shell("touch %s/qt_configured" % tgt_dir)

    qmake = os.path.join(qtprefix, "bin/qmake")

    dshell(qtprefix, "make -j%d" % multiprocessing.cpu_count())

    shell("rm -fr %s/app/bin %s/wkhtmltox" % (tgt_dir, tgt_dir))
    if cross:
        dshell(appprefix, qmake + " -set CROSS_COMPILE %s" % cross)

    wkh2ppro = os.path.join(srcDir, "wkhtmltopdf.pro")
    dshell(
        appprefix,
        f"{qmake} {wkh2ppro}",
    )

    dshell(appprefix, f"make install INSTALL_ROOT={tgt_dir}/wkhtmltox")


def list_targets(config):
    for target in sorted(config["docker-targets"]):
        message("docker\t%s" % target)


def main():
    parser = argparse.ArgumentParser(prog="build")
    sub = parser.add_subparsers(title="TARGETS", metavar="<target>")

    qemu = parser.add_mutually_exclusive_group()
    qemu.add_argument(
        "--no-qemu", action="store_true", default=False, help="don't use QEMU"
    )
    qemu.add_argument(
        "--use-qemu",
        metavar="PLATFORM",
        help='use a specific QEMU platform on the host. The platform must be a "os/architecture(/variant)" value',
    )

    docker = sub.add_parser("docker-images", help="build docker images")
    docker.add_argument(
        "--force",
        action="store_true",
        default=False,
        help="force rebuild for all specified targets",
    )
    docker.add_argument(
        "targets", nargs="+", metavar="TARGET", help="targets for which to build images"
    )

    docker.set_defaults(func=docker_images)

    compile = sub.add_parser("compile-docker", help="compile source via Docker image")
    compile.add_argument("target", help="target to use for compilation")
    compile.add_argument("src_dir", help="directory which has wkhtmltopdf source code")
    compile.add_argument("tgt_dir", help="output directory")
    compile.add_argument(
        "--debug", action="store_true", default=False, help="compile in debug mode"
    )
    compile.set_defaults(func=compile_docker)

    cli = sys.argv[1:] if len(sys.argv) > 1 else ["-h"]
    args = vars(parser.parse_args(cli))
    use_qemu = args.pop("use_qemu", None)
    no_qemu = args.pop("no_qemu")
    func = args.pop("func", None)
    bdir = os.path.dirname(os.path.abspath(__file__))

    if func is None:
        parser.print_help()
        exit(1)

    with open(os.path.join(bdir, "build.yml"), "r") as f:
        os.chdir(bdir)
        config = yaml.safe_load(f.read())
        # expand matrix into separate per-arch targets
        for name, target in list(config["docker-targets"].items()):
            if "qemu" in target and no_qemu:
                del target["qemu"]
            if use_qemu is not None:
                target["qemu"] = use_qemu
            distro_arch = target.get("matrix")
            if not distro_arch:
                continue
            for arch in distro_arch:
                new_target = copy.deepcopy(target)
                del new_target["matrix"]
                new_target["arch"] = arch
                new_target["platform"] = config["matrix-platforms"][arch]
                if use_qemu is not None:
                    new_target["qemu"] = use_qemu
                elif not no_qemu:
                    # keep the old behavior for convienience
                    # workaround https://bugs.launchpad.net/qemu/+bug/1805913 for 32-bit targets
                    new_target["qemu"] = (
                        "linux/amd64"
                        if new_target["platform"]
                        not in ("linux/arm/v5", "linux/arm/v7")
                        else "linux/386"
                    )
                config["docker-targets"]["%s-%s" % (name, arch)] = new_target
            del config["docker-targets"][name]
        func(config, **args)


if __name__ == "__main__":
    main()
