// Code generated by "packer-sdc mapstructure-to-hcl2"; DO NOT EDIT.

package image

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

// FlatConfig is an auto-generated flat version of Config.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatConfig struct {
	APIToken         *string  `mapstructure:"api_token" required:"true" cty:"api_token" hcl:"api_token"`
	APIURL           *string  `mapstructure:"api_url" cty:"api_url" hcl:"api_url"`
	HTTPRetryMax     *int     `mapstructure:"http_retry_max" required:"false" cty:"http_retry_max" hcl:"http_retry_max"`
	HTTPRetryWaitMax *float64 `mapstructure:"http_retry_wait_max" required:"false" cty:"http_retry_wait_max" hcl:"http_retry_wait_max"`
	HTTPRetryWaitMin *float64 `mapstructure:"http_retry_wait_min" required:"false" cty:"http_retry_wait_min" hcl:"http_retry_wait_min"`
	Name             *string  `mapstructure:"name" cty:"name" hcl:"name"`
	NameRegex        *string  `mapstructure:"name_regex" cty:"name_regex" hcl:"name_regex"`
	Type             *string  `mapstructure:"type" cty:"type" hcl:"type"`
	Region           *string  `mapstructure:"region" cty:"region" hcl:"region"`
	Latest           *bool    `mapstructure:"latest" cty:"latest" hcl:"latest"`
}

// FlatMapstructure returns a new FlatConfig.
// FlatConfig is an auto-generated flat version of Config.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Config) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatConfig)
}

// HCL2Spec returns the hcl spec of a Config.
// This spec is used by HCL to read the fields of Config.
// The decoded values from this spec will then be applied to a FlatConfig.
func (*FlatConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"api_token":           &hcldec.AttrSpec{Name: "api_token", Type: cty.String, Required: false},
		"api_url":             &hcldec.AttrSpec{Name: "api_url", Type: cty.String, Required: false},
		"http_retry_max":      &hcldec.AttrSpec{Name: "http_retry_max", Type: cty.Number, Required: false},
		"http_retry_wait_max": &hcldec.AttrSpec{Name: "http_retry_wait_max", Type: cty.Number, Required: false},
		"http_retry_wait_min": &hcldec.AttrSpec{Name: "http_retry_wait_min", Type: cty.Number, Required: false},
		"name":                &hcldec.AttrSpec{Name: "name", Type: cty.String, Required: false},
		"name_regex":          &hcldec.AttrSpec{Name: "name_regex", Type: cty.String, Required: false},
		"type":                &hcldec.AttrSpec{Name: "type", Type: cty.String, Required: false},
		"region":              &hcldec.AttrSpec{Name: "region", Type: cty.String, Required: false},
		"latest":              &hcldec.AttrSpec{Name: "latest", Type: cty.Bool, Required: false},
	}
	return s
}

// FlatDatasourceOutput is an auto-generated flat version of DatasourceOutput.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatDatasourceOutput struct {
	ImageID      *int     `mapstructure:"image_id" cty:"image_id" hcl:"image_id"`
	ImageRegions []string `mapstructure:"image_regions" cty:"image_regions" hcl:"image_regions"`
}

// FlatMapstructure returns a new FlatDatasourceOutput.
// FlatDatasourceOutput is an auto-generated flat version of DatasourceOutput.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*DatasourceOutput) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatDatasourceOutput)
}

// HCL2Spec returns the hcl spec of a DatasourceOutput.
// This spec is used by HCL to read the fields of DatasourceOutput.
// The decoded values from this spec will then be applied to a FlatDatasourceOutput.
func (*FlatDatasourceOutput) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"image_id":      &hcldec.AttrSpec{Name: "image_id", Type: cty.Number, Required: false},
		"image_regions": &hcldec.AttrSpec{Name: "image_regions", Type: cty.List(cty.String), Required: false},
	}
	return s
}
